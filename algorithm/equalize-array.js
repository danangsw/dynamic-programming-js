/**
 * https://www.hackerrank.com/challenges/equality-in-a-array/problem
 * 
 * Complete the 'equalizeArray' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

function equalizeArray(arr) {
    // Write your code here
    const map = new Map();

    let sumMax = -1000;
    let len = arr.length;
    arr.forEach(e => {
        if (map.has(e)) map.set(e, map.get(e) + 1);
        else map.set(e, 1);
        if (map.get(e) > sumMax) sumMax = map.get(e);
    });

    return len - sumMax;
}

console.log(equalizeArray([3, 3, 2, 1, 3]));
console.log(equalizeArray([1, 2, 3, 1, 2, 3, 3, 3]));
console.log(equalizeArray([3, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1]));